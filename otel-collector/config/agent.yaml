# tcplog/docker raw body: <11>1 2023-10-23T09:11:43Z b39fb8a20536 hotrod 7835 - - 2023-10-23T09:11:43.915Z\tINFO\tfrontend/best_eta.go:90\tFound routes\t{\"service\": \"frontend\", \"trace_id\": \"3f7fd2b0689627b8\", \"span_id\": \"3f7fd2b0689627b8\", \"routes\": [{},{},{},{},{},{},{},{},{},{}]}","attributes":{"body":"2023-10-23T09:11:43.915Z\tINFO\tfrontend/best_eta.go:90\tFound routes\t{\"service\": \"frontend\", \"trace_id\": \"3f7fd2b0689627b8\", \"span_id\": \"3f7fd2b0689627b8\", \"routes\": [{},{},{},{},{},{},{},{},{},{}]}"

receivers:
  otlp/spanmetrics:
    protocols:
      grpc:
        endpoint: localhost:12345
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  hostmetrics:
    collection_interval: 15s
    scrapers:
      cpu: {}
      load: {}
      memory: {}
      disk: {}
      filesystem: {}
      network: {}
  prometheus:
    config:
      global:
        scrape_interval: 60s
      scrape_configs:
        # otel-collector internal metrics
        - job_name: otel-collector
          static_configs:
            - targets:
                - localhost:8888

processors:
  batch:
    send_batch_size: 10000
    send_batch_max_size: 11000
    timeout: 10s
  # memory_limiter:
  #   # 80% of maximum memory up to 2G
  #   limit_mib: 1500
  #   # 25% of limit up to 2G
  #   spike_limit_mib: 512
  #   check_interval: 5s
  #
  #   # 50% of the maximum memory
  #   limit_percentage: 50
  #   # 20% of max memory usage spike expected
  #   spike_limit_percentage: 20
  # queued_retry:
  #   num_workers: 4
  #   queue_size: 100
  #   retry_on_failure: true
  resourcedetection:
    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.
    detectors: [env] # include ec2 for AWS, gcp for GCP and azure for Azure.
    timeout: 2s

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
  zpages:
    endpoint: 0.0.0.0:55679
  pprof:
    endpoint: 0.0.0.0:1777

exporters:
  otlp:
    endpoint: ${XO_COLLECTOR_ENDPOINT}
    tls:
      insecure: true
  # logging: {}

service:
  extensions:
    - health_check
    - zpages
    - pprof
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp]
    metrics:
      receivers: [hostmetrics]
      processors: [batch, resourcedetection]
      exporters: [otlp]
    # metrics/spanmetrics:
    #   receivers: [otlp/spanmetrics]
    #   exporters: [otlp]
