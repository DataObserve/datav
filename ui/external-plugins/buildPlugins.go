package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"os"
	"os/exec"
	"strings"
)

var skip string

func main() {
	flag.StringVar(&skip, "skip", "", "-skip [panel|datasource]-[pluginType]  e.g. -skip panel.demo,datasource.demo  , this will skip installing the panel plugin with type demo and also skips the datasource plugin with type demo")
	flag.Parse()

	skipList := strings.Split(skip, ",")
	skipMap := make(map[string]bool)
	for _, skip := range skipList {
		skipMap[skip] = true
	}

	// Walk("./panel", true, true, walker)
	cmd := exec.Command("bash", "-c", "mkdir -p ../public/plugins/external/panel")
	cmd.CombinedOutput()

	cmd = exec.Command("bash", "-c", "mkdir -p ../public/plugins/external/datasource")
	cmd.CombinedOutput()

	cmd = exec.Command("bash", "-c", "mkdir -p ../src/views/dashboard/plugins/external/panel")
	cmd.CombinedOutput()

	cmd = exec.Command("bash", "-c", "mkdir -p ../src/views/dashboard/plugins/external/datasource")
	cmd.CombinedOutput()

	importPluginsStr1 := `
// DON'T modify this file, it is automatically generated by Datav external plugin system
import { DatasourcePluginComponents, PanelPluginComponents } from "types/plugins/plugin"
`

	panelExportStr := `
export const externalPanelPlugins: Record<string,PanelPluginComponents> = {`

	{
		builtInPanels, err := os.ReadDir("../src/views/dashboard/plugins/built-in/panel")
		if err != nil {
			log.Fatal("read panel dir error", err)
		}
		currentPanelsMap := make(map[string]bool)
		for _, panel := range builtInPanels {
			currentPanelsMap[panel.Name()] = true
		}

		// generate panel plugins
		panels, err := os.ReadDir("./panel")
		if err != nil {
			log.Fatal("read panel dir error", err)
		}

		panelPluginsList := make([]map[string]string, 0)

		for _, panel := range panels {
			panelType := panel.Name()
			n := strings.Join([]string{"panel", panelType}, ".")
			if skipMap[n] {
				log.Println("skip panel plugin: ", panelType)
				continue
			}

			if panelType == ".DS_Store" {
				continue
			}
			if _, ok := currentPanelsMap[panelType]; ok {
				log.Println("ERROR !! The same panel name already exists in built-in panels: <", panelType, ">, please rename the panel you want to add")
				continue
			}
			// cp .svg to public/plugins/external/panel
			cmdStr := fmt.Sprintf("cp ./panel/%s/%s.svg ../public/plugins/external/panel", panelType, panelType)
			cmd := exec.Command("bash", "-c", cmdStr)
			if _, err := cmd.CombinedOutput(); err != nil {
				log.Println("copy plugin .svg  error: ", err, ", panel: ", panelType)
				continue
			}

			// cp panel codes into src/views/dashboard/plugins/panel
			cmdStr = fmt.Sprintf("cp -r ./panel/%s ../src/views/dashboard/plugins/external/panel", panelType)
			cmd = exec.Command("bash", "-c", cmdStr)
			if _, err := cmd.CombinedOutput(); err != nil {
				log.Println("copy plugin code dir  error: ", err, ", panel: ", panelType)
				continue
			}

			panelPluginsList = append(panelPluginsList, map[string]string{
				"type": panelType,
			})

			componentStr := strings.Title(panelType) + "Components"
			importPluginsStr1 += fmt.Sprintf("\nimport %s from \"./panel/%s\"", componentStr, panelType)

			panelExportStr += fmt.Sprintf("\n\t\"%s\": %s,", panelType, componentStr)
		}

		panelExportStr += "\n}"

		// generate panel plugin.json
		pluginsJson, _ := json.Marshal(panelPluginsList)
		err = os.WriteFile("../public/plugins/external/panel/plugins.json", pluginsJson, 0666)
		if err != nil {
			log.Fatal("write plugin.json error", err)
		}

	}

	datasourceExportStr := `
export const externalDatasourcePlugins: Record<string,DatasourcePluginComponents> = {`

	{
		builtInDatasources, err := os.ReadDir("../src/views/dashboard/plugins/built-in/datasource")
		if err != nil {
			log.Fatal("read panel dir error", err)
		}
		currentDatasourceMap := make(map[string]bool)
		for _, ds := range builtInDatasources {
			currentDatasourceMap[ds.Name()] = true
		}

		// generate panel plugins
		datasources, err := os.ReadDir("./datasource")
		if err != nil {
			log.Fatal("read datasource dir error", err)
		}

		datasourcePluginsList := make([]map[string]string, 0)

		for _, ds := range datasources {
			dsType := ds.Name()

			n := strings.Join([]string{"datasource", dsType}, ".")
			if skipMap[n] {
				log.Println("skip datasource plugin: ", dsType)
				continue
			}

			if dsType == ".DS_Store" {
				continue
			}
			if _, ok := currentDatasourceMap[dsType]; ok {
				log.Println("ERROR !! The same datasource name already exists in built-in datasources: <", dsType, ">, please rename the datasource you want to add")
				continue
			}
			cmdStr := fmt.Sprintf("cp ./datasource/%s/%s.svg ../public/plugins/external/datasource", dsType, dsType)
			cmd := exec.Command("bash", "-c", cmdStr)
			if _, err := cmd.CombinedOutput(); err != nil {
				log.Println("copy plugin .svg  error: ", err, ", datasource: ", dsType)
				continue
			}

			// cp panel codes into src/views/dashboard/plugins/panel
			cmdStr = fmt.Sprintf("cp -r ./datasource/%s ../src/views/dashboard/plugins/external/datasource", dsType)
			cmd = exec.Command("bash", "-c", cmdStr)
			if _, err := cmd.CombinedOutput(); err != nil {
				log.Println("copy plugin code dir  error: ", err, ", datasource: ", dsType)
				continue
			}

			datasourcePluginsList = append(datasourcePluginsList, map[string]string{
				"type": dsType,
			})

			componentStr := strings.Title(dsType) + "DatasrouceComponents"
			importPluginsStr1 += fmt.Sprintf("\nimport %s from \"./datasource/%s\"", componentStr, dsType)

			datasourceExportStr += fmt.Sprintf("\n\t\"%s\": %s,", dsType, componentStr)
		}

		datasourceExportStr += "\n}"

		// generate panel plugin.json
		pluginsJson, _ := json.Marshal(datasourcePluginsList)
		err = os.WriteFile("../public/plugins/external/datasource/plugins.json", pluginsJson, 0666)
		if err != nil {
			log.Fatal("write plugin.json error", err)
		}

	}

	externalPluginFile := importPluginsStr1 + panelExportStr + datasourceExportStr

	// generate externalPlugins.ts file
	err := os.WriteFile("../src/views/dashboard/plugins/external/plugins.ts", []byte(externalPluginFile), 0666)
	if err != nil {
		log.Fatal("write plugin.json error", err)
	}

	log.Println("Generate panel plugins file successfully!")
}
